south is {5 AK873 A874 K75}

source lib/score.tcl


array set count {
 attempts 0
 hands 0
 tricks 0
}

sdev gameMakes
sdev exactlyFour

patternclass longest { return $l1 }
patternclass longest2 { return $l1 + $l2 }
holdingProc aceandtens {a k q j t} { return [expr {$a + $t}] }
holdingProc aceandtenandnine {a k q j t x9} { return [expr {$a + $t + $x9}] }
patterncond has_shortness { $l4 < 2 }
patterncond is_box { $l4 == 3 }
shapecond NT2dshape { $s <= 3 && $s >= 2 && $h <= 3 && $h >= 2 && $d <= 5 && $d >= 2 && $c <= 5 && $c >= 2}
shapecond NTshape {$s <= 5 && $s >= 2 && $h <= 5 && $h >= 2 && $d <= 6 && $d >= 2 && $c <= 6 && $c >= 2 && ($s < 5 || ($h < 4 && $d < 4 && $c < 4)) && ($h < 5 || ($s < 4 && $d < 4 && $c < 4))} 

shapecond validForProblem { ($s == 2) && ($h == 2) && ($d == 4) && ($c == 5) } 


proc imp_score {a b} {
  set diff [expr $a - $b]
  set pos 1
  if {$diff < 0 } {
    set pos -1
    set diff [expr -1 * $diff]
  }
  if {$diff <= 10} {return 0}
  if {$diff <= 40} {return [expr $pos * 1]}
  if {$diff <= 80} {return [expr $pos * 2]}
  if {$diff <= 120} {return [expr $pos * 3]}
  if {$diff <= 160} {return [expr $pos * 4]}
  if {$diff <= 210} {return [expr $pos * 5]}
  if {$diff <= 260} {return [expr $pos * 6]}
  if {$diff <= 310} {return [expr $pos * 7]}
  if {$diff <= 360} {return [expr $pos * 8]}
  if {$diff <= 420} {return [expr $pos * 9]}
  if {$diff <= 490} {return [expr $pos * 10]}
  if {$diff <= 590} {return [expr $pos * 11]}
  if {$diff <= 740} {return [expr $pos * 12]}
  if {$diff <= 890} {return [expr $pos * 13]}
  if {$diff <= 1090} {return [expr $pos * 14]}
  if {$diff <= 1290} {return [expr $pos * 15]}
  if {$diff <= 1490} {return [expr $pos * 16]}
  if {$diff <= 1740} {return [expr $pos * 17]}
  if {$diff <= 1990} {return [expr $pos * 18]}
  if {$diff <= 2240} {return [expr $pos * 19]}
  if {$diff <= 2490} {return [expr $pos * 20]}
  if {$diff <= 2990} {return [expr $pos * 21]}
  if {$diff <= 3490} {return [expr $pos * 22]}
  if {$diff <= 3990} {return [expr $pos * 23]}
  return [expr $pos * 24]
}

proc write_deal {} {
  set tr [deal::tricks north diamonds]

  global count
  global gameMakes
  global exactlyFour

  incr count(hands)


  set count(tricks) [expr $count(tricks) + $tr]
  
  if {$tr >= 11 } {
    gameMakes add 1
  } else {
    gameMakes add 0
  }

  if {$tr == 10} {
    exactlyFour add 1
  } else {
    exactlyFour add 0
  }
  

#  formatter::write_deal
#  puts "There are $tr tricks in diamonds"
}


deal_finished {
  global count
  global gameMakes
  global exactlyFour

  puts "We attempted $count(attempts) shuffles and played $count(hands) total hands"
  puts "=================================================="
  puts "Across all hands game made [gameMakes average] times"
  puts "Across all hands exactly four made [exactlyFour average] times"
}

defvector controls 2 1

main {
  global count

  incr count(attempts)
  reject if {[hcp north]<10}
  reject if {[hcp north]>10}
  reject if {![validForProblem north]}
  reject if {[controls north]>2}
  accept
}
