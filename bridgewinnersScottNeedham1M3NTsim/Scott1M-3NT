
source lib/score.tcl


array set count {
 attempts 0
 hands 0
 tricks 0
 tricksS 0
 choiceOfSpBetter 0
 choiceOfSpWorse 0
 choiceOfBothMake 0
 choiceOfSpMake 0
 choiceOf3ntMake 0
 choiceOfBothFail 0
 hcpN 0
 hcpS 0
 hcpB 0

 hands11 0
 tricks11 0
 tricksS11 0
 choiceOfSpBetter11 0
 choiceOfSpWorse11 0
 choiceOfBothMake11 0
 choiceOfSpMake11 0
 choiceOf3ntMake11 0
 choiceOfBothFail11 0
 hcpN11 0 
 hcpS11 0
 hcpB11 0
 hands12 0
 tricks12 0
 tricksS12 0
 choiceOfSpBetter12 0
 choiceOfSpWorse12 0
 choiceOfBothMake12 0
 choiceOfSpMake12 0
 choiceOf3ntMake12 0
 choiceOfBothFail12 0
 hcpN12 0 
 hcpS12 0
 hcpB12 0
 hands13 0
 tricks13 0
 tricksS13 0
 choiceOfSpBetter13 0
 choiceOfSpWorse13 0
 choiceOfBothMake13 0
 choiceOfSpMake13 0
 choiceOf3ntMake13 0
 choiceOfBothFail13 0
 hcpN13 0 
 hcpS13 0
 hcpB13 0
 hands14 0
 tricks14 0
 tricksS14 0
 choiceOfSpBetter14 0
 choiceOfSpWorse14 0
 choiceOfBothMake14 0
 choiceOfSpMake14 0
 choiceOf3ntMake14 0
 choiceOfBothFail14 0
 hcpN14 0 
 hcpS14 0
 hcpB14 0

}

sdev trickcount
sdev trickScount
sdev impSpadeV
sdev impSpadeNV

sdev trickcount11
sdev trickScount11
sdev impSpadeV11
sdev impSpadeNV11
sdev trickcount12
sdev trickScount12
sdev impSpadeV12
sdev impSpadeNV12
sdev trickcount13
sdev trickScount13
sdev impSpadeV13
sdev impSpadeNV13
sdev trickcount14
sdev trickScount14
sdev impSpadeV14
sdev impSpadeNV14


patternclass longest { return $l1 }
patternclass longest2 { return $l1 + $l2 }
holdingProc aceandtens {a k q j t} { return [expr {$a + $t}] }
holdingProc aceandtenandnine {a k q j t x9} { return [expr {$a + $t + $x9}] }
patterncond has_shortness { $l4 < 2 }
patterncond is_box { $l4 == 3 }
patterncond is_4432 { $l1 == 4 && $l2 == 4 && $l3 == 3 && $l4 == 2 }
patterncond is_5332 { $l1 == 5 && $l2 == 3 && $l3 == 3 && $l4 == 2 }
shapecond NT2dshape { $s <= 3 && $s >= 2 && $h <= 3 && $h >= 2 && $d <= 5 && $d >= 2 && $c <= 5 && $c >= 2}
shapecond NTshape {$s <= 5 && $s >= 2 && $h <= 5 && $h >= 2 && $d <= 6 && $d >= 2 && $c <= 6 && $c >= 2 && ($s < 5 || ($h < 4 && $d < 4 && $c < 4)) && ($h < 5 || ($s < 4 && $d < 4 && $c < 4))} 

proc open1nt {hand} {
  set p [hcp $hand]

  if { $p < 14 || $p > 17 } {
    return 0
  }

  if {![NTshape $hand]} {
    return 0
  }
  if {$p == 14} {
    if {[longest $hand] < 5 && !([aceandtens $hand] > 3 || [aceandtenandnine $hand] > 5)} {
      return 0
    }
  }
  if {$p == 17} {
    if {[longest $hand] >= 5 || ([aceandtens $hand] > 3 || [aceandtenandnine $hand] > 5)} {
      return 0
    }
  }

  return 1
}

proc open1ntandacceptinv {hand} {
  set p [hcp $hand]
  set l [longest $hand]
  
  if {($p + $l) >= 20} {
    return 1
  }

  return 0
}

proc open1ntstaynegrejinv {hand} {
  set p [hcp $hand]

  if {$p != 14} {
    return 0
  }

  if {[NT2dshape $hand]} {
    return 1
  }

  return 0
}

proc passover1nt {hand} {
  set p [hcp $hand]
  set l1 [longest $hand]
  set l2 [longest2 $hand]
  set ltc [newLTC $hand]

  if {$p > 17} {
    # X 1nt for penalty
    return 0
  }

  if {($l2 - $ltc) > 2.5} {
    # we overcall a 2 suited bid
    return 0
  }

  if {($l1 > 7) || ($l1 == 6 && [has_shortness $hand])} {
    # conservative one suited showing
    return 0
  }

  return 1
}

proc bidpass {hand} {
  set p [hcp $hand]
  set l1 [longest $hand]
  set l2 [longest2 $hand]

  # Open 12 counts
  if {$p > 11} {
    return 0
  }

  # Open rule of 20 hands
  if {($p + $l1 + $l2) > 19} {
    return 0
  }

  # Open preempts as long as you have 4+ points and 6+ cards
  if {($p > 3) && ($l1 > 5)} {
    return 0
  }

  # else pass
  return 1
}

proc imp_score {a b} {
  set diff [expr $a - $b]
  set pos 1
  if {$diff < 0 } {
    set pos -1
    set diff [expr -1 * $diff]
  }
  if {$diff <= 10} {return 0}
  if {$diff <= 40} {return [expr $pos * 1]}
  if {$diff <= 80} {return [expr $pos * 2]}
  if {$diff <= 120} {return [expr $pos * 3]}
  if {$diff <= 160} {return [expr $pos * 4]}
  if {$diff <= 210} {return [expr $pos * 5]}
  if {$diff <= 260} {return [expr $pos * 6]}
  if {$diff <= 310} {return [expr $pos * 7]}
  if {$diff <= 360} {return [expr $pos * 8]}
  if {$diff <= 420} {return [expr $pos * 9]}
  if {$diff <= 490} {return [expr $pos * 10]}
  if {$diff <= 590} {return [expr $pos * 11]}
  if {$diff <= 740} {return [expr $pos * 12]}
  if {$diff <= 890} {return [expr $pos * 13]}
  if {$diff <= 1090} {return [expr $pos * 14]}
  if {$diff <= 1290} {return [expr $pos * 15]}
  if {$diff <= 1490} {return [expr $pos * 16]}
  if {$diff <= 1740} {return [expr $pos * 17]}
  if {$diff <= 1990} {return [expr $pos * 18]}
  if {$diff <= 2240} {return [expr $pos * 19]}
  if {$diff <= 2490} {return [expr $pos * 20]}
  if {$diff <= 2990} {return [expr $pos * 21]}
  if {$diff <= 3490} {return [expr $pos * 22]}
  if {$diff <= 3990} {return [expr $pos * 23]}
  return [expr $pos * 24]
}

proc write_deal {} {
  set tr [deal::tricks south notrump]
  set trS [deal::tricks south spades]

  set scV [score {3 notrump} vul $tr]
  set scSV [score {4 spades} vul $trS]
  set scNV [score {3 notrump} nonvul $tr]
  set scSNV [score {4 spades} nonvul $trS]

  set hcpN [hcp north]
  set hcpS [hcp south]
  set hcpB [expr $hcpN + $hcpS]

  global count
  global trickcount
  global trickScount
  global impSpadeV
  global impSpadeNV
  global trickcount11
  global trickScount11
  global impSpadeV11
  global impSpadeNV11
  global trickcount12
  global trickScount12
  global impSpadeV12
  global impSpadeNV12
  global trickcount13
  global trickScount13
  global impSpadeV13
  global impSpadeNV13
  global trickcount14
  global trickScount14
  global impSpadeV14
  global impSpadeNV14

  set count(hcpN) [expr $count(hcpN) + $hcpN]
  if {$hcpN == 11} {set count(hcpN11) [expr $count(hcpN11) + $hcpN]}
  if {$hcpN == 12} {set count(hcpN12) [expr $count(hcpN12) + $hcpN]}
  if {$hcpN == 13} {set count(hcpN13) [expr $count(hcpN13) + $hcpN]}
  if {$hcpN == 14} {set count(hcpN14) [expr $count(hcpN14) + $hcpN]}
  set count(hcpS) [expr $count(hcpS) + $hcpS]
  if {$hcpN == 11} {set count(hcpS11) [expr $count(hcpS11) + $hcpS]}
  if {$hcpN == 12} {set count(hcpS12) [expr $count(hcpS12) + $hcpS]}
  if {$hcpN == 13} {set count(hcpS13) [expr $count(hcpS13) + $hcpS]}
  if {$hcpN == 14} {set count(hcpS14) [expr $count(hcpS14) + $hcpS]}
  set count(hcpB) [expr $count(hcpB) + $hcpB]
  if {$hcpN == 11} {set count(hcpB11) [expr $count(hcpB11) + $hcpB]}
  if {$hcpN == 12} {set count(hcpB12) [expr $count(hcpB12) + $hcpB]}
  if {$hcpN == 13} {set count(hcpB13) [expr $count(hcpB13) + $hcpB]}
  if {$hcpN == 14} {set count(hcpB14) [expr $count(hcpB14) + $hcpB]}

  incr count(hands)
  if {$hcpN == 11} {incr count(hands11)}
  if {$hcpN == 12} {incr count(hands12)}
  if {$hcpN == 13} {incr count(hands13)}
  if {$hcpN == 14} {incr count(hands14)}

  trickcount add $tr
  if {$hcpN == 11} {trickcount11 add $tr}
  if {$hcpN == 12} {trickcount12 add $tr}
  if {$hcpN == 13} {trickcount13 add $tr}
  if {$hcpN == 14} {trickcount14 add $tr}

  set count(tricks) [expr $count(tricks) + $tr]
  if {$hcpN == 11} {set count(tricks11) [expr $count(tricks11) + $tr]}
  if {$hcpN == 12} {set count(tricks12) [expr $count(tricks12) + $tr]}
  if {$hcpN == 13} {set count(tricks13) [expr $count(tricks13) + $tr]}
  if {$hcpN == 14} {set count(tricks14) [expr $count(tricks14) + $tr]}
  
  trickScount add $trS
  if {$hcpN == 11} {trickScount11 add $trS}
  if {$hcpN == 12} {trickScount12 add $trS}
  if {$hcpN == 13} {trickScount13 add $trS}
  if {$hcpN == 14} {trickScount14 add $trS}

  set count(tricksS) [expr $count(tricksS) + $trS]
  if {$hcpN == 11} {set count(tricksS11) [expr $count(tricksS11) + $trS]}
  if {$hcpN == 12} {set count(tricksS12) [expr $count(tricksS12) + $trS]}
  if {$hcpN == 13} {set count(tricksS13) [expr $count(tricksS13) + $trS]}
  if {$hcpN == 14} {set count(tricksS14) [expr $count(tricksS14) + $trS]}

  if {$tr >= 9 && $trS >= 10} {
    incr count(choiceOfBothMake)
    if {$hcpN == 11} {incr count(choiceOfBothMake11)}
    if {$hcpN == 12} {incr count(choiceOfBothMake12)}
    if {$hcpN == 13} {incr count(choiceOfBothMake13)}
    if {$hcpN == 14} {incr count(choiceOfBothMake14)}
    if {$tr >= $trS} {
      incr count(choiceOfSpWorse)
      if {$hcpN == 11} {incr count(choiceOfSpWorse11)}
      if {$hcpN == 12} {incr count(choiceOfSpWorse12)}
      if {$hcpN == 13} {incr count(choiceOfSpWorse13)}
      if {$hcpN == 14} {incr count(choiceOfSpWorse14)}
    } else {
      incr count(choiceOfSpBetter)
      if {$hcpN == 11} {incr count(choiceOfSpBetter11)}
      if {$hcpN == 12} {incr count(choiceOfSpBetter12)}
      if {$hcpN == 13} {incr count(choiceOfSpBetter13)}
      if {$hcpN == 14} {incr count(choiceOfSpBetter14)}
    }
  } elseif {$tr >= 9} {
    incr count(choiceOf3ntMake)
    if {$hcpN == 11} {incr count(choiceOf3ntMake11)}
    if {$hcpN == 12} {incr count(choiceOf3ntMake12)}
    if {$hcpN == 13} {incr count(choiceOf3ntMake13)}
    if {$hcpN == 14} {incr count(choiceOf3ntMake14)}
    incr count(choiceOfSpWorse)
    if {$hcpN == 11} {incr count(choiceOfSpWorse11)}
    if {$hcpN == 12} {incr count(choiceOfSpWorse12)}
    if {$hcpN == 13} {incr count(choiceOfSpWorse13)}
    if {$hcpN == 14} {incr count(choiceOfSpWorse14)}
  } elseif {$trS >= 10} {
    incr count(choiceOfSpMake)
    if {$hcpN == 11} {incr count(choiceOfSpMake11)}
    if {$hcpN == 12} {incr count(choiceOfSpMake12)}
    if {$hcpN == 13} {incr count(choiceOfSpMake13)}
    if {$hcpN == 14} {incr count(choiceOfSpMake14)}
    incr count(choiceOfSpBetter)
    if {$hcpN == 11} {incr count(choiceOfSpBetter11)}
    if {$hcpN == 12} {incr count(choiceOfSpBetter12)}
    if {$hcpN == 13} {incr count(choiceOfSpBetter13)}
    if {$hcpN == 14} {incr count(choiceOfSpBetter14)}
  } else {
    incr count(choiceOfBothFail)
      if {$hcpN == 11} {incr count(choiceOfBothFail11)}
      if {$hcpN == 12} {incr count(choiceOfBothFail12)}
      if {$hcpN == 13} {incr count(choiceOfBothFail13)}
      if {$hcpN == 14} {incr count(choiceOfBothFail14)}
    if {($tr + 1) > $trS} {
      incr count(choiceOfSpWorse)
      if {$hcpN == 11} {incr count(choiceOfSpWorse11)}
      if {$hcpN == 12} {incr count(choiceOfSpWorse12)}
      if {$hcpN == 13} {incr count(choiceOfSpWorse13)}
      if {$hcpN == 14} {incr count(choiceOfSpWorse14)}
    } elseif {($tr + 1) < $trS} {
      incr count(choiceOfSpBetter)
      if {$hcpN == 11} {incr count(choiceOfSpBetter11)}
      if {$hcpN == 12} {incr count(choiceOfSpBetter12)}
      if {$hcpN == 13} {incr count(choiceOfSpBetter13)}
      if {$hcpN == 14} {incr count(choiceOfSpBetter14)}
    }
  }

  set impSV [imp_score $scSV $scV]

  impSpadeV add $impSV
  if {$hcpN == 11} {impSpadeV11 add $impSV}
  if {$hcpN == 12} {impSpadeV12 add $impSV}
  if {$hcpN == 13} {impSpadeV13 add $impSV}
  if {$hcpN == 14} {impSpadeV14 add $impSV}

  set impSNV [imp_score $scSNV $scNV]

  impSpadeNV add $impSNV
  if {$hcpN == 11} {impSpadeNV11 add $impSNV}
  if {$hcpN == 12} {impSpadeNV12 add $impSNV}
  if {$hcpN == 13} {impSpadeNV13 add $impSNV}
  if {$hcpN == 14} {impSpadeNV14 add $impSNV}

#  formatter::write_deal
#  puts "There are $tr tricks in NT (NV $scNV, V $scV)"
#  puts "There are $trS tricks in spades (NV $scSNV, V $scSV); imps V $impSV; imps NV $impSNV"
#  puts "---------------------------------"
}


deal_finished {
  global count
  global trickcount
  global trickScount
  global impSpadeV
  global impSpadeNV

  puts "We attempted $count(attempts) shuffles and played $count(hands) total hands"
  puts "========================================================================================================================================================================="
  puts "5=(332) 11-14 hcp ([expr double(round((double($count(hcpN))/$count(hands))*100))/100] hcp average) vs 3=(433) 13-15 hcp ([expr double(round(double($count(hcpS))/$count(hands)*100))/100] hcp average) with [expr double(round(double($count(hcpB))/$count(hands)*100))/100] hcp average combined ($count(hands) hands)"
  puts "========================================================================================================================================================================="

  puts "* Across all such hands there were an average of [trickcount average] tricks available in nt"
  puts "* Across all such hands there were an average of [trickScount average] tricks available in spades"
  puts "* ======================================================================================================================================================================="
  set sameS [expr $count(hands) - $count(choiceOfSpBetter) - $count(choiceOfSpWorse)]
  puts "* If we choice of game between 4 Spaces and 3nt:"
  puts "* Spades scores better $count(choiceOfSpBetter) times ([expr double(round(double($count(choiceOfSpBetter))/$count(hands)*10000))/100]%), NT scores better $count(choiceOfSpWorse) times ([expr double(round(double($count(choiceOfSpWorse))/$count(hands)*10000))/100]%) and they are the same $sameS times ([expr double(round(double($sameS)/$count(hands)*10000))/100]%)"
  puts "* So in MP of even split S scores [expr double(round(double($count(choiceOfSpBetter)*2+$sameS)/(2*$count(hands))*10000))/100]% and NT scores [expr double(round(double($count(choiceOfSpWorse)*2+$sameS)/(2*$count(hands))*10000))/100]%"
  puts "* ======================================================================================================================================================================="
  puts "* In terms of games: both games make $count(choiceOfBothMake) times ([expr double(round(double($count(choiceOfBothMake))/$count(hands)*10000))/100]%), only the NT game makes $count(choiceOf3ntMake) times ([expr double(round(double($count(choiceOf3ntMake))/$count(hands)*10000))/100]%), only spades make $count(choiceOfSpMake) times ([expr double(round(double($count(choiceOfSpMake))/$count(hands)*10000))/100]%), and both are down $count(choiceOfBothFail) times ([expr double(round(double($count(choiceOfBothFail))/$count(hands)*10000))/100]%)"
  puts "* So being in spades scored [impSpadeNV average] imps better when NV"
  puts "* So being in spades scored [impSpadeV average] imps better when V"

  puts "* ======================================================================================================================================================================="
  puts "** 5=(332) 11 hcp ([expr double(round((double($count(hcpN11))/$count(hands11))*100))/100] hcp average) vs 3=(433) 13-15 hcp ([expr double(round(double($count(hcpS11))/$count(hands11)*100))/100] hcp average) with [expr double(round(double($count(hcpB11))/$count(hands11)*100))/100] hcp average combined ($count(hands11) hands)"
  puts "** ======================================================================================================================================================================"

  puts "*** Across all such hands there were an average of [trickcount11 average] tricks available in nt"
  puts "*** Across all such hands there were an average of [trickScount11 average] tricks available in spades"
  puts "*** ====================================================================================================================================================================="
  set sameS [expr $count(hands11) - $count(choiceOfSpBetter11) - $count(choiceOfSpWorse11)]
  puts "*** If we choice of game between 4 Spaces and 3nt:"
  puts "*** Spades scores better $count(choiceOfSpBetter11) times ([expr double(round(double($count(choiceOfSpBetter11))/$count(hands11)*10000))/100]%), NT scores better $count(choiceOfSpWorse11) times ([expr double(round(double($count(choiceOfSpWorse11))/$count(hands11)*10000))/100]%) and they are the same $sameS times ([expr double(round(double($sameS)/$count(hands11)*10000))/100]%)"
  puts "*** So in MP of even split S scores [expr double(round(double($count(choiceOfSpBetter11)*2+$sameS)/(2*$count(hands11))*10000))/100]% and NT scores [expr double(round(double($count(choiceOfSpWorse11)*2+$sameS)/(2*$count(hands11))*10000))/100]%"
  puts "*** ====================================================================================================================================================================="
  puts "*** In terms of games: both games make $count(choiceOfBothMake11) times ([expr double(round(double($count(choiceOfBothMake11))/$count(hands11)*10000))/100]%), only the NT game makes $count(choiceOf3ntMake11) times ([expr double(round(double($count(choiceOf3ntMake11))/$count(hands11)*10000))/100]%), only spades make $count(choiceOfSpMake11) times ([expr double(round(double($count(choiceOfSpMake11))/$count(hands11)*10000))/100]%), and both are down $count(choiceOfBothFail11) times ([expr double(round(double($count(choiceOfBothFail11))/$count(hands11)*10000))/100]%)"
  puts "*** So being in spades scored [impSpadeNV11 average] imps better when NV"
  puts "*** So being in spades scored [impSpadeV11 average] imps better when V"

  puts "* ======================================================================================================================================================================="
  puts "** 5=(332) 12 hcp ([expr double(round((double($count(hcpN12))/$count(hands12))*100))/100] hcp average) vs 3=(433) 13-15 hcp ([expr double(round(double($count(hcpS12))/$count(hands12)*100))/100] hcp average) with [expr double(round(double($count(hcpB12))/$count(hands12)*100))/100] hcp average combined ($count(hands12) hands)"
  puts "** ======================================================================================================================================================================"

  puts "*** Across all such hands there were an average of [trickcount12 average] tricks available in nt"
  puts "*** Across all such hands there were an average of [trickScount12 average] tricks available in spades"
  puts "*** ====================================================================================================================================================================="
  set sameS [expr $count(hands12) - $count(choiceOfSpBetter12) - $count(choiceOfSpWorse12)]
  puts "*** If we choice of game between 4 Spaces and 3nt:"
  puts "*** Spades scores better $count(choiceOfSpBetter12) times ([expr double(round(double($count(choiceOfSpBetter12))/$count(hands12)*10000))/100]%), NT scores better $count(choiceOfSpWorse12) times ([expr double(round(double($count(choiceOfSpWorse12))/$count(hands12)*10000))/100]%) and they are the same $sameS times ([expr double(round(double($sameS)/$count(hands12)*10000))/100]%)"
  puts "*** So in MP of even split S scores [expr double(round(double($count(choiceOfSpBetter12)*2+$sameS)/(2*$count(hands12))*10000))/100]% and NT scores [expr double(round(double($count(choiceOfSpWorse12)*2+$sameS)/(2*$count(hands12))*10000))/100]%"
  puts "*** ====================================================================================================================================================================="
  puts "*** In terms of games: both games make $count(choiceOfBothMake12) times ([expr double(round(double($count(choiceOfBothMake12))/$count(hands12)*10000))/100]%), only the NT game makes $count(choiceOf3ntMake12) times ([expr double(round(double($count(choiceOf3ntMake12))/$count(hands12)*10000))/100]%), only spades make $count(choiceOfSpMake12) times ([expr double(round(double($count(choiceOfSpMake12))/$count(hands12)*10000))/100]%), and both are down $count(choiceOfBothFail12) times ([expr double(round(double($count(choiceOfBothFail12))/$count(hands12)*10000))/100]%)"
  puts "*** So being in spades scored [impSpadeNV12 average] imps better when NV"
  puts "*** So being in spades scored [impSpadeV12 average] imps better when V"

  puts "* ======================================================================================================================================================================="
  puts "** 5=(332) 13 hcp ([expr double(round((double($count(hcpN13))/$count(hands13))*100))/100] hcp average) vs 3=(433) 13-15 hcp ([expr double(round(double($count(hcpS13))/$count(hands13)*100))/100] hcp average) with [expr double(round(double($count(hcpB13))/$count(hands13)*100))/100] hcp average combined ($count(hands13) hands)"
  puts "** ======================================================================================================================================================================"

  puts "*** Across all such hands there were an average of [trickcount13 average] tricks available in nt"
  puts "*** Across all such hands there were an average of [trickScount13 average] tricks available in spades"
  puts "*** ====================================================================================================================================================================="
  set sameS [expr $count(hands13) - $count(choiceOfSpBetter13) - $count(choiceOfSpWorse13)]
  puts "*** If we choice of game between 4 Spaces and 3nt:"
  puts "*** Spades scores better $count(choiceOfSpBetter13) times ([expr double(round(double($count(choiceOfSpBetter13))/$count(hands13)*10000))/100]%), NT scores better $count(choiceOfSpWorse13) times ([expr double(round(double($count(choiceOfSpWorse13))/$count(hands13)*10000))/100]%) and they are the same $sameS times ([expr double(round(double($sameS)/$count(hands13)*10000))/100]%)"
  puts "*** So in MP of even split S scores [expr double(round(double($count(choiceOfSpBetter13)*2+$sameS)/(2*$count(hands13))*10000))/100]% and NT scores [expr double(round(double($count(choiceOfSpWorse13)*2+$sameS)/(2*$count(hands13))*10000))/100]%"
  puts "*** ====================================================================================================================================================================="
  puts "*** In terms of games: both games make $count(choiceOfBothMake13) times ([expr double(round(double($count(choiceOfBothMake13))/$count(hands13)*10000))/100]%), only the NT game makes $count(choiceOf3ntMake13) times ([expr double(round(double($count(choiceOf3ntMake13))/$count(hands13)*10000))/100]%), only spades make $count(choiceOfSpMake13) times ([expr double(round(double($count(choiceOfSpMake13))/$count(hands13)*10000))/100]%), and both are down $count(choiceOfBothFail13) times ([expr double(round(double($count(choiceOfBothFail13))/$count(hands13)*10000))/100]%)"
  puts "*** So being in spades scored [impSpadeNV13 average] imps better when NV"
  puts "*** So being in spades scored [impSpadeV13 average] imps better when V"

  puts "* ======================================================================================================================================================================="
  puts "** 5=(332) 14 hcp ([expr double(round((double($count(hcpN14))/$count(hands14))*100))/100] hcp average) vs 3=(433) 13-15 hcp ([expr double(round(double($count(hcpS14))/$count(hands14)*100))/100] hcp average) with [expr double(round(double($count(hcpB14))/$count(hands14)*100))/100] hcp average combined ($count(hands14) hands)"
  puts "** ======================================================================================================================================================================"

  puts "*** Across all such hands there were an average of [trickcount14 average] tricks available in nt"
  puts "*** Across all such hands there were an average of [trickScount14 average] tricks available in spades"
  puts "*** ====================================================================================================================================================================="
  set sameS [expr $count(hands14) - $count(choiceOfSpBetter14) - $count(choiceOfSpWorse14)]
  puts "*** If we choice of game between 4 Spaces and 3nt:"
  puts "*** Spades scores better $count(choiceOfSpBetter14) times ([expr double(round(double($count(choiceOfSpBetter14))/$count(hands14)*10000))/100]%), NT scores better $count(choiceOfSpWorse14) times ([expr double(round(double($count(choiceOfSpWorse14))/$count(hands14)*10000))/100]%) and they are the same $sameS times ([expr double(round(double($sameS)/$count(hands14)*10000))/100]%)"
  puts "*** So in MP of even split S scores [expr double(round(double($count(choiceOfSpBetter14)*2+$sameS)/(2*$count(hands14))*10000))/100]% and NT scores [expr double(round(double($count(choiceOfSpWorse14)*2+$sameS)/(2*$count(hands14))*10000))/100]%"
  puts "*** ====================================================================================================================================================================="
  puts "*** In terms of games: both games make $count(choiceOfBothMake14) times ([expr double(round(double($count(choiceOfBothMake14))/$count(hands14)*10000))/100]%), only the NT game makes $count(choiceOf3ntMake14) times ([expr double(round(double($count(choiceOf3ntMake14))/$count(hands14)*10000))/100]%), only spades make $count(choiceOfSpMake14) times ([expr double(round(double($count(choiceOfSpMake14))/$count(hands14)*10000))/100]%), and both are down $count(choiceOfBothFail14) times ([expr double(round(double($count(choiceOfBothFail14))/$count(hands14)*10000))/100]%)"
  puts "*** So being in spades scored [impSpadeNV14 average] imps better when NV"
  puts "*** So being in spades scored [impSpadeV14 average] imps better when V"
  puts "========================================================================================================================================================================="


}

main {
  global count

  incr count(attempts)
  reject if {[spades north] < 5}
  reject if {![is_5332 north]}
  reject if {[hcp north] < 11 || [hcp north] > 15}
  # North is 5=(332) and 11-14
#  reject if {![passover1nt east]}
  reject if {![is_box south]}
  reject if {[spades south] == 4}
  reject if {[hcp south] < 13 || [hcp south] > 15}
  # South is 3=(433) and 13-15 hcp
  accept
}
